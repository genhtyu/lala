import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def plot_feature_distribution_bars(data, feature, set_column='type', 
                                  bins=None, bin_edges=None, 
                                  old_label='Выборка 1', new_label='Выборка 2'):
    """
    Строит bar chart распределения фичи для old и new выборок
    
    Parameters:
    data: DataFrame с данными
    feature: название фичи для анализа
    set_column: колонка с типом выборки
    bins: количество бинов или список границ
    bin_edges: границы бинов вручную [start, end, step] (любые числа)
    old_label: подпись для old выборки
    new_label: подпись для new выборки
    """
    
    # Фильтруем данные
    df_old = data[data[set_column] == 'old'][feature].dropna()
    df_new = data[data[set_column] == 'new'][feature].dropna()
    
    # Определяем границы бинов
    if bin_edges is not None:
        # Ручные границы [start, end, step] с любыми числами
        bins_custom = np.arange(bin_edges[0], bin_edges[1] + bin_edges[2], bin_edges[2])
    elif bins is not None:
        if isinstance(bins, list):
            # Уже готовый список границ
            bins_custom = bins
        else:
            # Автоматические бины с указанным количеством
            bins_custom = bins
    else:
        # Автоматическое определение
        bins_custom = 'auto'
    
    # Считаем распределения
    counts_old, bin_edges_old = np.histogram(df_old, bins=bins_custom, density=False)
    counts_new, bin_edges_new = np.histogram(df_new, bins=bins_custom, density=False)
    
    # Преобразуем в проценты
    total_old = len(df_old)
    total_new = len(df_new)
    
    percent_old = (counts_old / total_old) * 100
    percent_new = (counts_new / total_new) * 100
    
    # Создаем подписи для бинов с любыми числами
    bin_labels = []
    for i in range(len(bin_edges_old) - 1):
        if bin_edges_old[i].is_integer() and bin_edges_old[i+1].is_integer():
            label = f'{bin_edges_old[i]:.0f}-{bin_edges_old[i+1]:.0f}'
        else:
            label = f'{bin_edges_old[i]:.2f}-{bin_edges_old[i+1]:.2f}'
        bin_labels.append(label)
    
    # Построение графика
    plt.figure(figsize=(14, 8))
    
    x = np.arange(len(bin_labels))
    width = 0.35
    
    bars_old = plt.bar(x - width/2, percent_old, width, 
                      label=old_label, alpha=0.8, color='blue')
    bars_new = plt.bar(x + width/2, percent_new, width, 
                      label=new_label, alpha=0.8, color='red')
    
    plt.xlabel(f'Значения фичи: {feature}')
    plt.ylabel('Доля наблюдений (%)')
    plt.title(f'Распределение фичи "{feature}" по выборкам')
    plt.xticks(x, bin_labels, rotation=45, ha='right')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # Добавляем значения на столбцы
    for i, (old_val, new_val) in enumerate(zip(percent_old, percent_new)):
        if old_val > 0.5:  # Добавляем только если значение > 0.5%
            plt.text(i - width/2, old_val + 0.3, f'{old_val:.1f}%', 
                    ha='center', va='bottom', fontsize=8)
        if new_val > 0.5:
            plt.text(i + width/2, new_val + 0.3, f'{new_val:.1f}%', 
                    ha='center', va='bottom', fontsize=8)
    
    plt.tight_layout()
    plt.show()
    
    # Возвращаем данные для анализа
    result_df = pd.DataFrame({
        'bin_range': bin_labels,
        'bin_start': bin_edges_old[:-1],
        'bin_end': bin_edges_old[1:],
        f'{old_label}_count': counts_old,
        f'{new_label}_count': counts_new,
        f'{old_label}_percent': percent_old,
        f'{new_label}_percent': percent_new
    })
    
    return result_df

# Альтернативная версия с точным контролем формата подписей
def plot_feature_distribution_precise(data, feature, set_column='type', 
                                     bin_edges=None, decimal_places=2,
                                     old_label='Выборка 1', new_label='Выборка 2'):
    """
    Версия с точным контролем формата чисел на оси
    """
    
    df_old = data[data[set_column] == 'old'][feature].dropna()
    df_new = data[data[set_column] == 'new'][feature].dropna()
    
    # Используем точные границы
    if bin_edges is None:
        # Автоматические границы
        min_val = min(df_old.min(), df_new.min())
        max_val = max(df_old.max(), df_new.max())
        bin_edges = np.linspace(min_val, max_val, 10)
    else:
        bin_edges = np.array(bin_edges)
    
    # Считаем распределения
    counts_old, bin_edges_old = np.histogram(df_old, bins=bin_edges, density=False)
    counts_new, bin_edges_new = np.histogram(df_new, bins=bin_edges, density=False)
    
    # Преобразуем в проценты
    total_old = len(df_old)
    total_new = len(df_new)
    
    percent_old = (counts_old / total_old) * 100
    percent_new = (counts_new / total_new) * 100
    
    # Создаем подписи с контролем точности
    bin_labels = []
    for i in range(len(bin_edges_old) - 1):
        format_str = f'{{:.{decimal_places}f}}'
        start_label = format_str.format(bin_edges_old[i])
        end_label = format_str.format(bin_edges_old[i+1])
        label = f'{start_label}-{end_label}'
        bin_labels.append(label)
    
    # Построение графика
    plt.figure(figsize=(14, 8))
    
    x = np.arange(len(bin_labels))
    width = 0.35
    
    bars_old = plt.bar(x - width/2, percent_old, width, 
                      label=old_label, alpha=0.8, color='blue')
    bars_new = plt.bar(x + width/2, percent_new, width, 
                      label=new_label, alpha=0.8, color='red')
    
    plt.xlabel(f'Значения фичи: {feature}')
    plt.ylabel('Доля наблюдений (%)')
    plt.title(f'Распределение фичи "{feature}" по выборкам')
    plt.xticks(x, bin_labels, rotation=45, ha='right')
    plt.legend()
    plt.grid(True, alpha=0.3)
    
    # Добавляем значения на столбцы
    for i, (old_val, new_val) in enumerate(zip(percent_old, percent_new)):
        if old_val > 0.1:
            plt.text(i - width/2, old_val + 0.2, f'{old_val:.1f}%', 
                    ha='center', va='bottom', fontsize=8)
        if new_val > 0.1:
            plt.text(i + width/2, new_val + 0.2, f'{new_val:.1f}%', 
                    ha='center', va='bottom', fontsize=8)
    
    plt.tight_layout()
    plt.show()
    
    return pd.DataFrame({
        'bin_range': bin_labels,
        'bin_start': bin_edges_old[:-1],
        'bin_end': bin_edges_old[1:],
        f'{old_label}_count': counts_old,
        f'{new_label}_count': counts_new,
        f'{old_label}_percent': percent_old,
        f'{new_label}_percent': percent_new
    })
